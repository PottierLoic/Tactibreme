name: Build and Release Executable

on:
  push:
    branches:
      - release
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: main.exe
            asset_name: main-windows.exe
          - os: ubuntu-latest
            artifact_name: main
            asset_name: main-linux
          - os: macos-latest
            artifact_name: main
            asset_name: main-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy 
          pip install -r requirements.txt

      - name: Generate spec file
        run: |
          pyi-makespec --onefile --noconsole --hidden-import=argparse main.py

      - name: Edit spec file to exclude heavy modules
        run: python edit_spec.py

      - name: Build executable with edited spec
        timeout-minutes: 60
        run: |
          pyinstaller main.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: dist/${{ matrix.artifact_name }}

      - name: Create Release
        if: github.ref == 'refs/heads/release' && matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/${{ matrix.artifact_name }}
          name: Release ${{ github.sha }}
          tag_name: v${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (non-Windows)
        if: github.ref == 'refs/heads/release' && matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/${{ matrix.artifact_name }}
          tag_name: v${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
